package vn.com.flight.customerManagement;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.util.Tuple;


/**
 * 
 * @author G3-SS207
 *
 */
@DClass(schema="FLIGHT")
public class Role {
  
	  @DAttr(name="id",id=true,auto=true,length=3,mutable=false,optional=false,type=Type.Integer)
	  private int id;
	//static variable to keep track of role id
	  private static int idCounter;
	  
  @DAttr(name="name",type=Type.String,length=20,optional=false,cid=true)
  private String name;
  
  @DAttr(name="account",type=Type.Domain,serialisable=false)
  @DAssoc(ascName="account-has-role",role="role",
  ascType=AssocType.One2One, endType=AssocEndType.One,
  associate=@Associate(type=Account.class,cardMin=1,cardMax=25,determinant=true))
  private Account account;
  
  

  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  @DOpt(type=DOpt.Type.RequiredConstructor)
  public Role(@AttrRef("name") String name) 
  {
    this(null, name);
  }

  // from object form: Student is included
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public Role(@AttrRef("name") String name, @AttrRef("user") Account account) 
  {
    this(null, name, account);
  }

  // from data source
  @DOpt(type=DOpt.Type.DataSourceConstructor)
  public Role(@AttrRef("id") Integer id, @AttrRef("name") String name) 
  {
    this(id, name, null);
  
  }
  private Role(Integer id, String name, Account account) 
  {
	    this.id = nextId(id);
	    this.name = name;
	    this.account = account;
	  
	   
  }
private static int nextId(Integer currID) 
  {
    if (currID == null) 
  {
      idCounter++;
      return idCounter;
  } else {
      int num = currID.intValue();
      if (num > idCounter)
        idCounter = num;
      
      return currID;
    }
  }

  /**
   * @requires 
   *  minVal != null /\ maxVal != null
   * @effects 
   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
   */
  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(
      DAttr attrib,
      Tuple derivingValue, 
      Object minVal, 
      Object maxVal) throws ConstraintViolationException 
  {
    
    if (minVal != null && maxVal != null) 
    {
      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
      int maxIdVal = (Integer) maxVal;
      if (maxIdVal > idCounter)  
        idCounter = maxIdVal;
    }
  }
  
  public int getId() 
  {
    return id;
  }

 public void setAccount(Account account) 
 {
	this.account = account;
 }

public Account getAccount() 
 {
	return account;
 }

public String getName() 
 {
	return name;
 }

public void setName(String name) 
 {
	this.name = name;
 }


  @Override
  public String toString() 
  {
    return name ;
  }
}
