package vn.com.flight.flightManagement;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;
import vn.com.flight.customerManagement.City;


@DClass(schema="FLIGHT")
public class Airport {
	  public static final String A_city = "city";
	  
	  @DAttr(name="id",id=true,auto=true,length=3,mutable=false,optional=false,type=Type.Integer)
	  private int id;
	//static variable to keep track of airport id
	  private static int idCounter;
	  
	  @DAttr(name="name",type=Type.String,length=20,optional=false,cid=true)
	  private String name;
	  
	  @DAttr(name="AirportCode",type=Type.String,length=20,optional=false)
	  private String AirportCode;

	  @DAttr(name = A_city, type = Type.Domain, length = 20, optional = false)
	  @DAssoc(ascName="airport-has-city",role="airport",
	      ascType=AssocType.One2One, endType=AssocEndType.Many,
	  associate=@Associate(type=City.class,cardMin=1,cardMax=25))
	  private City city;
	  
//	  @DAttr(name = "airport", type = Type.Domain, length = 20, optional = true)
//	  @DAssoc(ascName="flight-has-airport",role="flight",
//	      ascType=AssocType.One2Many, endType=AssocEndType.Many,
//	  associate=@Associate(type=Flight.class,cardMin=1,cardMax=10))
//	  private Flight flight;
	  
	  @DOpt(type=DOpt.Type.ObjectFormConstructor)
	  @DOpt(type=DOpt.Type.RequiredConstructor)
	  public Airport(@AttrRef("name") String name,
			  @AttrRef("AirportCode") String AirportCode,
			  @AttrRef("city") City city) 
	  {
	    this(null, name, AirportCode,city);
	  }
	  public Airport(Integer id, String name, String AirportCode, City city) 
	  {
		    this.id = nextId(id);
		    this.name = name;
		    this.AirportCode = AirportCode;
		    this.city = city;
		  
		   
	  }
	  
	  
	  
	public void setCity(City city) 
	{
		this.city = city;
	}
	public City getCity() 
	{
		return city;
	}
	public String getName() 
	{
		return name;
	}
	public void setName(String name) 
	{
		this.name = name;
	}
	public String getAirportCode() 
	{
		return AirportCode;
	}
	public void setAirportCode(String airportCode) 
	{
		AirportCode = airportCode;
	}
	public int getId() 
	{
		return id;
	}
	
	
	private static int nextId(Integer currID) 
	{
		    if (currID == null) 
		    {
		      idCounter++;
		      return idCounter;
		    } else {
		      int num = currID.intValue();
		      if (num > idCounter)
		        idCounter = num;
		      
		      return currID;
		    }
	}
	  /**
	   * @requires 
	   *  minVal != null /\ maxVal != null
	   * @effects 
	   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	   */
	  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
	  public static void updateAutoGeneratedValue(
	      DAttr attrib,
	      Tuple derivingValue, 
	      Object minVal, 
	      Object maxVal) throws ConstraintViolationException 
	  {
	    
	    if (minVal != null && maxVal != null) 
	    {
	      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
	      int maxIdVal = (Integer) maxVal;
	      if (maxIdVal > idCounter)  
	        idCounter = maxIdVal;
	    }
	  }
	  @Override
	  public String toString() 
	  {
	    return name ;
	  }
	  
	  
}
